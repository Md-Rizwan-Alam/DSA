Problem 1.Given an array of n numbers, give an algorithm which gives the element appearing maximum
number of times?


Answer:

def find_max_frequency_element(arr):
    # Create a dictionary to store the frequency of each element
    frequency_dict = {}

    # Iterate through the array and count the frequency of each element
    for num in arr:
        if num in frequency_dict:
            frequency_dict[num] += 1
        else:
            frequency_dict[num] = 1

    # Find the element with the maximum frequency
    max_frequency_element = max(frequency_dict, key=frequency_dict.get)

    return max_frequency_element

# Example usage:
arr = [1, 2, 3, 4, 2, 2, 3, 1, 2, 5, 5, 5, 5]
result = find_max_frequency_element(arr)
print("Element appearing the maximum number of times:", result)





Problem 2 : We are given a list of n-1 integers and these integers are in the range of 1 to n . There are no
duplicates in the list. One of the integers is missing in the list. Give an algorithm to find that element Ex:
[1,2,4,6,3,7,8] 5 is the missing num.



Answer: 

def find_missing_element(nums):
    n = len(nums) + 1  # n is the expected size of the list

    # Calculate the sum of the first n natural numbers
    expected_sum = (n * (n + 1)) // 2

    # Calculate the sum of the given list
    actual_sum = sum(nums)

    # The missing element is the difference between the expected and actual sums
    missing_element = expected_sum - actual_sum

    return missing_element

# Example usage:
arr = [1, 2, 4, 6, 3, 7, 8]
result = find_missing_element(arr)
print("The missing element is:", result)



Problem 3 : Given an array of n positive numbers. All numbers occurs even number of times except 1 which
occurs odd number of times. Find that number in O(n) time and O(1) space. Ex: [1,2,3,2,3,1,3]. 3 is repeats odd
times.


Answer:

def find_odd_occurrence(arr):
    result = 0

    # XOR all elements in the array
    for num in arr:
        result ^= num

    return result

# Example usage:
arr = [1, 2, 3, 2, 3, 1, 3]
result = find_odd_occurrence(arr)
print("The number occurring odd number of times is:", result)




Problem 4 : Given an array of n elements. Find two elements in the array such that their sum is equal to given
element K.



Answer:

def find_pair_with_sum(arr, K):
    seen = set()

    for num in arr:
        complement = K - num
        if complement in seen:
            return num, complement
        seen.add(num)

    # If no such pair is found
    return None

# Example usage:
arr = [1, 2, 3, 4, 5, 6]
target_sum = 9
result = find_pair_with_sum(arr, target_sum)

if result:
    print("Pair with sum", target_sum, "is:", result)
else:
    print("No such pair found.")



Problem 5 : Given an array of both positive and negative numbers, find two numbers such that their sum is
closest to 0. Ex: [ 1 ,60 ,-10, 70, -80,85]. Ans : -80,85.



Answer: 


def find_closest_to_zero(arr):
    arr.sort()  # Sort the array

    left, right = 0, len(arr) - 1
    closest_sum = float('inf')
    result_pair = None

    while left < right:
        current_sum = arr[left] + arr[right]

        # Update the closest pair if the current pair has a closer sum to 0
        if abs(current_sum) < abs(closest_sum):
            closest_sum = current_sum
            result_pair = (arr[left], arr[right])

        # Move pointers based on the comparison of the current sum with 0
        if current_sum < 0:
            left += 1
        elif current_sum > 0:
            right -= 1
        else:
            return result_pair  # If the sum is exactly 0, return the pair

    return result_pair

# Example usage:
arr = [1, 60, -10, 70, -80, 85]
result = find_closest_to_zero(arr)
print("Pair with sum closest to 0 is:", result)




Problem 6 : Given an array of n elements . Find three elements such that their sum is equal to the given
number.


Answer:


def find_triplet_with_sum(arr, target_sum):
    arr.sort()  # Sort the array

    n = len(arr)

    for i in range(n - 2):
        left, right = i + 1, n - 1

        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]

            if current_sum == target_sum:
                return arr[i], arr[left], arr[right]
            elif current_sum < target_sum:
                left += 1
            else:
                right -= 1

    # If no such triplet is found
    return None

# Example usage:
arr = [1, 4, 2, 8, 3, 5, 9]
target_sum = 17
result = find_triplet_with_sum(arr, target_sum)

if result:
    print("Triplet with sum", target_sum, "is:", result)
else:
    print("No such triplet found.")



Problem 7 : Given an array of n elements . Find three elements i, j, k in the array such that
i * i + j * j = k*k.


Answer:


def find_pythagorean_triplet(arr):
    arr.sort()  # Sort the array

    n = len(arr)

    for k in range(n - 1, 1, -1):
        left, right = 0, k - 1

        while left < right:
            sum_squares = arr[left] ** 2 + arr[right] ** 2

            if sum_squares == arr[k] ** 2:
                return arr[left], arr[right], arr[k]
            elif sum_squares < arr[k] ** 2:
                left += 1
            else:
                right -= 1

    # If no such triplet is found
    return None

# Example usage:
arr = [3, 1, 4, 6, 5]
result = find_pythagorean_triplet(arr)

if result:
    print("Pythagorean triplet is:", result)
else:
    print("No such triplet found.")



Problem 8 : An element is a majority if it appears more than n/2 times. Give an algorithm takes an array of n
element as argument and identifies a majority (if it exists).



Answer:


def find_majority_element(arr):
    candidate = None
    count = 0

    # Phase 1: Find a potential majority candidate
    for num in arr:
        if count == 0:
            candidate = num
            count = 1
        elif num == candidate:
            count += 1
        else:
            count -= 1

    # Phase 2: Verify if the candidate is a majority element
    count = 0
    for num in arr:
        if num == candidate:
            count += 1

    if count > len(arr) // 2:
        return candidate
    else:
        return None

# Example usage:
arr = [2, 2, 3, 1, 2, 2, 4, 2, 2]
result = find_majority_element(arr)

if result is not None:
    print("Majority element is:", result)
else:
    print("No majority element found.")



Problem 9 : Given n × n matrix, and in each row all 1’s are followed by 0’s. Find the row with the maximum
number of 0’s.


Answer:


def find_row_with_max_zeros(matrix):
    n = len(matrix)
    max_zeros_row = -1
    max_zeros_count = -1

    for i in range(n):
        zeros_count = matrix[i].count(0)

        if zeros_count > max_zeros_count:
            max_zeros_count = zeros_count
            max_zeros_row = i

    return max_zeros_row

# Example usage:
matrix = [
    [1, 1, 1, 0, 0],
    [1, 1, 0, 0, 0],
    [1, 1, 1, 1, 0],
    [1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1]
]

result = find_row_with_max_zeros(matrix)
print("Row with the maximum number of 0's is:", result)



Problem 10 : Sort an array of 0’s, 1’s and 2’s [or R’s, G’s and B’s]: Given an array A[] consisting of 0’s, 1’s and
2’s, give an algorithm for sorting A[].The algorithm should put all 0’s first, then all 1’s and finally all 2’s at the
end. Example Input = {0,1,1,0,1,2,1,2,0,0,0,1}, Output = {0,0,0,0,0,1,1,1,1,1,2,2}



Answer:

def sort_colors(arr):
    low = 0  # Pointer for 0's
    high = len(arr) - 1  # Pointer for 2's
    current = 0  # Pointer for traversal

    while current <= high:
        if arr[current] == 0:
            arr[low], arr[current] = arr[current], arr[low]
            low += 1
            current += 1
        elif arr[current] == 2:
            arr[current], arr[high] = arr[high], arr[current]
            high -= 1
        else:
            current += 1

# Example usage:
arr = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]
sort_colors(arr)
print("Sorted array:", arr)



Thanks!
