1. Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0)=5.

Answer:

T(2) = 3T(1)+12⋅2
=3⋅(3T(0)+12⋅1)+12⋅2
=3⋅(3⋅(3T(0)+12⋅1)+12⋅2)+12⋅2
=3 *2⋅(3T(0)+12⋅1)+3⋅12⋅2+12⋅2
=3 *2⋅(3⋅(3T(0)+12⋅1)+12⋅2)+3⋅12⋅2+12⋅2
=3 *3⋅(3T(0)+12⋅1)+3 *2⋅12⋅2+3⋅12⋅2+12⋅2

T(2)=3*3⋅(3T(0)+12⋅1)+3*2⋅12⋅2+3⋅12⋅2+12⋅2
=27⋅(15+12)+36⋅2+36+24
=27⋅27+72+60
=729+132
=861
​
 
Therefore, T(2)=861
T(2)=861.
​
 


2. Given a recurrence relation, solve it using the substitution method:

a. T(n) = T(n-1) + c

def recurrence_a(n, c):
    if n == 0:
        return c
    else:
        return recurrence_a(n-1, c)

# Test the function
result_a = recurrence_a(2, 5)
print(result_a)



b. T(n) = 2T(n/2) + n

def recurrence_b(n):
    if n == 1:
        return 1
    else:
        return 2 * recurrence_b(n // 2) + n

# Test the function
result_b = recurrence_b(4)
print(result_b)



c. T(n) = 2T(n/2) + c

def recurrence_c(n, c):
    if n == 1:
        return c
    else:
        return 2 * recurrence_c(n // 2, c) + c

# Test the function
result_c = recurrence_c(8, 3)
print(result_c)



d. T(n) = T(n/2) + c

def recurrence_d(n, c):
    if n == 1:
        return c
    else:
        return recurrence_d(n // 2, c) + c

# Test the function
result_d = recurrence_d(16, 2)
print(result_d)




3. Given a recurrence relation, solve it using the recursive tree approach:

a. T(n) = 2T(n-1) +1

               T(n)
               / \
         T(n-1)+1  T(n-1)+1
          / \      / \
 T(n-2)+1 T(n-2)+1 T(n-2)+1 T(n-2)+1
   / \     / \     / \     / \
...   ... ... ... ... ... ... ...



b. T(n) = 2T(n/2) + n


               T(n)
              / \
        T(n/2)+n  T(n/2)+n
          / \      / \
     T(n/4)+n/2 T(n/4)+n/2 T(n/4)+n/2 T(n/4)+n/2
       / \        / \        / \        / \
...   ...      ...  ...     ...  ...    ... ...










